name: TerraFusion CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: terrafusion_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run linting
      run: |
        pip install flake8 black isort
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check .
        isort --check-only --profile black .
    
    - name: Run tests
      env:
        PGHOST: localhost
        PGPORT: 5432
        PGUSER: postgres
        PGPASSWORD: postgres
        PGDATABASE: terrafusion_test
        PYTEST_ADDOPTS: "--cov=. --cov-report=xml"
      run: |
        pytest
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build and Push
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Determine Environment and Tag
      id: env-tag
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            echo "TAG=latest" >> $GITHUB_OUTPUT
          else
            echo "TAG=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          fi
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "ENV=prod" >> $GITHUB_OUTPUT
          echo "TAG=latest" >> $GITHUB_OUTPUT
        else
          echo "ENV=dev" >> $GITHUB_OUTPUT
          echo "TAG=dev" >> $GITHUB_OUTPUT
        fi
        echo "TIMESTAMP=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_REGISTRY }}/terrafusion:${{ steps.env-tag.outputs.TAG }}
          ${{ secrets.DOCKER_REGISTRY }}/terrafusion:${{ steps.env-tag.outputs.TIMESTAMP }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/terrafusion:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_REGISTRY }}/terrafusion:buildcache,mode=max
        build-args: |
          FLASK_ENV=${{ steps.env-tag.outputs.ENV }}

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Determine Environment
      id: env
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "ENV=prod" >> $GITHUB_OUTPUT
        else
          echo "ENV=dev" >> $GITHUB_OUTPUT
        fi
    
    - name: Setup Kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v2
      with:
        kustomize-version: '5.0.0'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update Kubeconfig
      run: |
        aws eks update-kubeconfig --name terrafusion-cluster --region ${{ secrets.AWS_REGION }}
    
    - name: Deploy to Kubernetes
      run: |
        # Set namespace based on environment
        NAMESPACE=terrafusion-${{ steps.env.outputs.ENV }}
        
        # Create namespace if it doesn't exist
        kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Create secrets for the environment
        kubectl create secret generic db-credentials \
          --from-literal=host=${{ secrets.PGHOST }} \
          --from-literal=port=${{ secrets.PGPORT }} \
          --from-literal=username=${{ secrets.PGUSER }} \
          --from-literal=password=${{ secrets.PGPASSWORD }} \
          --from-literal=database=${{ secrets.PGDATABASE }} \
          -n $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        kubectl create secret generic api-keys \
          --from-literal=openai_api_key=${{ secrets.OPENAI_API_KEY }} \
          --from-literal=anthropic_api_key=${{ secrets.ANTHROPIC_API_KEY }} \
          --from-literal=mcp_api_key=${{ secrets.MCP_API_KEY }} \
          -n $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
        
        # Apply the Kubernetes manifests
        kubectl apply -k k8s/overlays/${{ steps.env.outputs.ENV }}/ --prune -l app=terrafusion
        
        # Wait for the deployment to be ready
        kubectl rollout status deployment/terrafusion-api -n $NAMESPACE
    
    - name: Run Database Migrations
      run: |
        NAMESPACE=terrafusion-${{ steps.env.outputs.ENV }}
        POD=$(kubectl get pods -n $NAMESPACE -l app=terrafusion,component=api -o jsonpath="{.items[0].metadata.name}")
        kubectl exec -n $NAMESPACE $POD -- flask db upgrade
    
    - name: Verify Deployment
      run: |
        NAMESPACE=terrafusion-${{ steps.env.outputs.ENV }}
        # Make sure the deployment is still healthy after migrations
        kubectl rollout status deployment/terrafusion-api -n $NAMESPACE
        
        # Run a simple health check
        SERVICE_IP=$(kubectl get svc -n $NAMESPACE terrafusion-api -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        if [ -z "$SERVICE_IP" ]; then
          SERVICE_IP=$(kubectl get svc -n $NAMESPACE terrafusion-api -o jsonpath='{.spec.clusterIP}')
          kubectl run -n $NAMESPACE curl --image=curlimages/curl -i --rm --restart=Never -- curl -s http://$SERVICE_IP/health
        else
          curl -s http://$SERVICE_IP/health
        fi
    
    - name: Post Deployment Notification
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "TerraFusion deployment to ${{ steps.env.outputs.ENV }} completed successfully!"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK