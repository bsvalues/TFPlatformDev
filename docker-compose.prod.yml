version: '3.8'

services:
  web:
    image: terrafusion/terrafusion:latest
    deploy:
      mode: replicated
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: any
        max_attempts: 5
        window: 120s
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    environment:
      - FLASK_ENV=production
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "20"

  postgres:
    image: postgres:16
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: any
        max_attempts: 5
        window: 120s
    volumes:
      - postgres-prod-data:/var/lib/postgresql/data
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "20"

  # Add PostgreSQL replication for high availability
  postgres-replica:
    image: postgres:16
    environment:
      - POSTGRES_USER=${PGUSER:-postgres}
      - POSTGRES_PASSWORD=${PGPASSWORD}
      - POSTGRES_DB=${PGDATABASE:-terrafusion}
      - PGPASSWORD=${PGPASSWORD}
      - PRIMARY_HOST=postgres
    volumes:
      - postgres-replica-data:/var/lib/postgresql/data
    depends_on:
      - postgres
    entrypoint: |
      bash -c '
        until pg_isready -h postgres -p 5432; do
          echo "Waiting for primary database..."
          sleep 2
        done
        if [ ! -f /var/lib/postgresql/data/recovery.conf ]; then
          # Set up replication
          pg_basebackup -h postgres -D /var/lib/postgresql/data -U ${PGUSER:-postgres} -P -Xs -R
        fi
        exec docker-entrypoint.sh postgres
      '
    networks:
      - terrafusion-net
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  prometheus:
    volumes:
      - prometheus-prod-data:/prometheus
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  grafana:
    volumes:
      - grafana-prod-data:/var/lib/grafana
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  loki:
    volumes:
      - loki-prod-data:/loki
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # Add Redis for production caching and session management
  redis:
    image: redis:latest
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispassword}
    volumes:
      - redis-prod-data:/data
    networks:
      - terrafusion-net
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
        max_attempts: 5
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Add Nginx as a reverse proxy for production
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - web
    networks:
      - terrafusion-net
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
        max_attempts: 5
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres-prod-data:
  postgres-replica-data:
  prometheus-prod-data:
  grafana-prod-data:
  loki-prod-data:
  redis-prod-data: